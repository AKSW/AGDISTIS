stages:
- index
- build
- test
- build-docker
- test-docker
- release

variables:
  TEST_IMAGE: aksw/agdistis:$CI_BUILD_REF_NAME
  IMAGE: aksw/agdistis:latest

# cache index between all builds
cache:
  key: "index"
  paths:
    - index/

index:
  image: ubuntu
  stage: index
  only:
    - master
  script:
    #- if [ ! -d "/cache/aksw/AGDISTIS/index" ] ; then
    - apt-get update &&
        apt-get install -y p7zip-full wget &&
        wget http://titan.informatik.uni-leipzig.de/dmoussallem/indexdbpedia_en_2016.zip &&
        7z x indexdbpedia_en_2014.7z &&
        mv indexdbpedia_en_2014 index
    #  fi

build:
  image: maven
  stage: build
  only:
    - master
  script:
    - mvn package -Dmaven.test.skip=true
  artifacts:
    paths:
    - target/*.war

test:
  image: maven
  stage: test
  only:
    - master
  script:
    - mv /cache/aksw/AGDISTIS/index index
    - mvn test

build-docker:
  image: docker:latest
  stage: build-docker
  services:
    - docker:dind
  only:
    - master
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASS
  script:
    - docker build --pull -t $TEST_IMAGE .
    - docker push $TEST_IMAGE

test-docker:
  image: docker
  stage: test-docker
  only:
    - master
  services:
    - docker:dind
  script:
    - ls -al
    - docker pull $TEST_IMAGE
    - docker run -d --name agdistis -p 8080:8080 -v /cache/aksw/AGDISTIS/index:/usr/local/tomcat/index $TEST_IMAGE
    - sleep 20
    - docker logs agdistis
    - curl --data-urlencode "text='The <entity>University of Leipzig</entity> in <entity>Barack Obama</entity>.'" -d type='agdistis' http://localhost:8080/AGDISTIS
    - ./test-docker.sh

release:
  image: docker:latest
  stage: release
  services:
    - docker:dind
  only:
    - master
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASS
  script:
    - docker pull $TEST_IMAGE
    - docker tag $TEST_IMAGE $IMAGE
    - docker push $IMAGE
